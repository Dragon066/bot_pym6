from botpackage import *
from PIL import Image, ImageDraw, ImageFont

DATA = {}
WORDS = {}
try:
    cw_sessions = json.load(open('files/crossword_data/cw_sessions.txt', 'r', encoding='utf-8'))
except Exception as err:
    cw_sessions = {}
    log.exception(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Å—Å–∏–π –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–æ–≤')
try:
    STATS = json.load(open('files/crossword_data/STATS.txt', 'r', encoding='utf-8'))
except Exception as err:
    STATS = {}
    log.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–æ–≤')
try:
    TEMPLATES = json.load(open('files/crossword_data/TEMPLATES.txt', 'r', encoding='utf-8'))
except Exception as err:
    TEMPLATES = {}
    log.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞–∑—Ü–æ–≤ –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞')
cwheader = '<b>üÄÑÔ∏è <u>CrossWords</u></b>'
word_ending = {0: '', 1: '–æ', 2: '–∞', 3: '–∞', 4: '–∞', 5: '', 6: '', 7: '', 8: '', 9: ''}

class GenCW(StatesGroup):
    cw = State()


def field_from_template(template):
    template = '\n'.join([template['field'][i * template['cols'] : i * template['cols'] + template['cols']] for i in range(template['rows'])])
    field = []
    for row in template.split('\n'):
        field.append(list(row.strip()))
    return field


async def generate_crossword(field, attempts = 1000):
    while attempts:
        try:
            return gen(field)
        except Exception as ex:
            attempts -= 1
        await asyncio.sleep(0.0001)
    return None, None


def gen(field):
    # rows
    new_field = []
    meta_data = {}
    current_num = 1
    for i, row in enumerate(field):
        row = ''.join(row)
        s = re.search(r'[^#]{2,}', row)
        new_row = row
        while s:
            word = s.group().replace('*', '.')
            new_word = find_word(word).lower()
            if new_word not in meta_data.keys():
                meta_data[new_word] = {}
                meta_data[new_word]['num'] = current_num
                current_num += 1
                meta_data[new_word]['start'] = (i, s.span()[0])
                meta_data[new_word]['end'] = (i, s.span()[1] - 1)
                question = WORDS[str(len(word))][new_word][rnd.randint(0, len(WORDS[str(len(word))][new_word]) - 1)]
                meta_data[new_word]['question'] = question
                meta_data[new_word]['direction'] = 'horizontal'
                meta_data[new_word]['answered'] = False
                meta_data[new_word]['answered_by'] = None
            else:
                raise
            new_row = new_row[:s.span()[0]] + new_word + new_row[s.span()[1]:]
            row = row[:s.span()[0]] + '#' * len(s.group()) + row[s.span()[1]:]
            s = re.search(r'[^#]{2,}', row)
        new_field.append(list(new_row))
    # columns
    for column in range(len(new_field[0])):
        column_old = ''
        for row in range(len(new_field)):
            column_old += new_field[row][column]
        s = re.search(r'[^#]{2,}', column_old)
        new_column = column_old
        while s:
            word = s.group().replace('*', '.')
            new_word = find_word(word).lower()
            if new_word not in meta_data.keys():
                meta_data[new_word] = {}
                meta_data[new_word]['num'] = current_num
                current_num += 1
                meta_data[new_word]['start'] = (s.span()[0], column)
                meta_data[new_word]['end'] = (s.span()[1] - 1, column)
                question = WORDS[str(len(word))][new_word][rnd.randint(0, len(WORDS[str(len(word))][new_word]) - 1)]
                meta_data[new_word]['question'] = question
                meta_data[new_word]['direction'] = 'vertical'
                meta_data[new_word]['answered'] = False
                meta_data[new_word]['answered_by'] = None
            else:
                raise
            new_column = new_column[:s.span()[0]] + new_word + new_column[s.span()[1]:]
            column_old = column_old[:s.span()[0]] + '#' * len(s.group()) + column_old[s.span()[1]:]
            s = re.search(r'[^#]{2,}', column_old)
        for row in range(len(new_field)):
            new_field[row][column] = new_column[row]
    return {'field': to_raw_text(field), 'rows': len(field), 'columns': len(field[0])}, meta_data


def find_word(pattern):
    lst = list(WORDS[str(len(pattern))].keys())
    lst_ok = []
    for word in lst:
        if re.fullmatch(pattern, word):
            lst_ok.append(word)
    return lst_ok[rnd.randint(0, len(lst_ok) - 1)]


def to_raw_text(field):
    result = ""
    for row in field:
        result+= ''.join(row)
    return result


def get_all_questions(data):
    vertical, horizontal = [], []
    for key, word in data.items():
        temp = f"<b>{word['num']}.</b> {word['question']} <i>({len(key)})</i>"
        if word['answered']:
            temp = f"<strike>{temp}</strike>"
        if word['direction'] == 'horizontal':
            horizontal.append(temp)
        else:
            vertical.append(temp)
    vertical = '\n'.join(sorted(vertical, key=lambda s: s[:s.find('.')].isdigit()))
    horizontal = '\n'.join(sorted(horizontal, key=lambda s: s[:s.find('.')].isdigit()))
    if len(horizontal) == 0:
        horizontal = '–û—Ç—Å—É—Ç—Å–≤—É–µ—Ç :('
    if len(vertical) == 0:
        vertical = '–û—Ç—Å—É—Ç—Å–≤—É–µ—Ç :('
    result = f"<i>–ü–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏:</i>\n{horizontal}\n\n<i>–ü–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏:</i>\n{vertical}"
    return result


def open_words():
    global WORDS
    if not WORDS:
        with open('files/crossword_data/words.txt', 'r', encoding='utf-8') as f:
            WORDS = json.load(f)


def save_cw_sessions():
    global cw_sessions
    with open('files/crossword_data/cw_sessions.txt', 'w', encoding='utf-8') as f:
        json.dump(cw_sessions, f, ensure_ascii=False, indent=4)


def save_stats():
    global STATS
    with open('files/crossword_data/STATS.txt', 'w', encoding='utf-8') as f:
        json.dump(STATS, f, ensure_ascii=False, indent=4)


async def get_stat(id):
    if id not in STATS.keys():
        STATS[id] = {}
        STATS[id]['total'] = 0
        user = await bot.get_chat(int(id))
        STATS[id]['name'] = user.first_name
    text = f'{cwheader} <b>Stats</b>\n\n<b>{STATS[id]["name"]}</b>\nüìç –ü—Ä–∞–≤–∏–ª—å–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>{STATS[id]["total"]}</b>'
    return text


def get_cw_top():
    result = {v['name']: v['total'] for id, v in STATS.items() if id != str(bot_id)}
    result = dict(sorted(list(result.items()), key=lambda x: x[1], reverse=True))
    text = f'{cwheader} <b>Top</b>\n\n'
    symbs = {1: 'ü•á', 2: 'ü•à', 3: 'ü•â'}
    count = 1
    for name, total in list(result.items())[:10]:
        text += f"{f'  {count}' if count not in symbs else symbs[count]}{'. ' if count not in symbs else ''} <b>{name}</b> ‚Äî {total}\n"
        count += 1
    return text


def display_cw(field):
    result = ''
    rows = field['rows']
    try:
        cols = field['columns']
    except:
        cols = field['cols']
    for row in range(rows):
        result += ' '.join(field['field'][row * cols : row * cols + cols]) + '\n'
    return f"<code>{result}</code>"


def display_cw_img(field, data):
    rows = field['rows']
    cols = field['columns']
    field = field['field']
    layer = Image.new('RGBA', (100 * cols + 20 + 2 * cols, 100 * rows + 20 + 2 * rows), 'lightblue')
    draw = ImageDraw.Draw(layer)
    for col in range(cols):
        for row in range(rows):
            color = 'grey' if field[row * cols + col] == '#' else 'white'
            draw.rectangle((10 + col * 102, 10 + row * 102, 110 + col * 102, 110 + row * 102), fill=color)
            if field[row * cols + col] not in '*#':
                draw.text((10 + col * 102 + 28, 10 + row * 102 + 11), field[row * cols + col],
                          font=ImageFont.truetype('/usr/share/fonts/consolas/YaHei.Consolas.1.12.ttf', size=80), fill='black')
    for word, value in data.items():
        start = value['start']
        assign = 86 if value['direction'] == 'vertical' else 0
        if value['num'] // 10 > 0 and assign:
            assign -= 12
        draw.text((12 + start[1] * 102 + assign, 12 + start[0] * 102), str(value['num']),
                  font=ImageFont.truetype('/usr/share/fonts/consolas/YaHei.Consolas.1.12.ttf', size=20), fill='black')
    img = BytesIO()
    layer.save(img, 'PNG')
    img.seek(0)
    return img


def cw_checkfinish(id):
    for word in cw_sessions[id]['meta_data']:
        if not cw_sessions[id]['meta_data'][word]['answered']:
            return False
    return True


def get_cwutil_keyboard(id):
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text='üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É', callback_data=f"cw,tip,{id}")
    keyboard.add(button)
    button = types.InlineKeyboardButton(text='‚úè –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫—Ä–æ—Å—Å–≤–æ—Ä–¥', callback_data=f"cw,end,{id}")
    keyboard.add(button)
    button = types.InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å –∫—Ä–æ—Å—Å–≤–æ—Ä–¥', callback_data=f"cw,del,{id}")
    keyboard.add(button)
    button = types.InlineKeyboardButton(text='üö´ –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é', callback_data=f"cw,close")
    keyboard.add(button)
    return keyboard


def get_tip_keyboard(id, page):
    keyboard = types.InlineKeyboardMarkup()
    page = int(page)
    total = []
    for word, data in cw_sessions[id]['meta_data'].items():
        if not data['answered']:
            total.append((word, data['num'], data['question']))
    mx = page + 5 if page + 5 <= len(total) else len(total)
    for item in total[page:mx]:
        text = f"{item[1]} ({item[2][:15]}...)"
        button = types.InlineKeyboardButton(text=text, callback_data=f"cw,tip_go,{id},{item[0]}")
        keyboard.add(button)
    if len(total) > 5:
        button1 = types.InlineKeyboardButton(text='‚û°', callback_data=f"cw,tip_page,{id},{page + 5}")
        button2 = types.InlineKeyboardButton(text='‚¨Ö', callback_data=f"cw,tip_page,{id},{page - 5}")
        if page > 0 and len(total) - page > 5:
            keyboard.row(button2, button1)
        elif page > 0:
            keyboard.add(button2)
        else:
            keyboard.add(button1)
    button = types.InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data=f"cw,util,{id}")
    keyboard.add(button)
    return keyboard


def get_menu_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text='üé≤ C–ª—É—á–∞–π–Ω—ã–π –∫—Ä–æ—Å—Å–≤–æ—Ä–¥', callback_data=f"cw,random")
    keyboard.add(button)
    button = types.InlineKeyboardButton(text='üìÇ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ –æ–±—Ä–∞–∑—Ü—É', callback_data=f"cw,gen,{None},0")
    keyboard.add(button)
    button = types.InlineKeyboardButton(text='‚ùî –ö–∞–∫ –∏–≥—Ä–∞—Ç—å', callback_data=f"cw,help")
    keyboard.add(button)
    button = types.InlineKeyboardButton(text='üåü –¢–æ–ø', callback_data=f"cw,top")
    keyboard.add(button)
    button = types.InlineKeyboardButton(text='üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data=f"cw,stat")
    keyboard.add(button)
    button = types.InlineKeyboardButton(text='üÄÑÔ∏è –û CrossWords', callback_data=f"cw,info")
    keyboard.add(button)
    button = types.InlineKeyboardButton(text='üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data=f"cw,close")
    keyboard.add(button)
    return keyboard


def get_tryagain_keyboard(category, field):
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text='‚úè –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑', callback_data=f"cw,gen_go,{category},{field}")
    keyboard.add(button)
    button = types.InlineKeyboardButton(text='üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data=f"cw,close")
    keyboard.add(button)
    return keyboard


def get_gen_keyboard(category, page):
    keyboard = types.InlineKeyboardMarkup()
    page = int(page)
    if category != 'None':
        mx = page + 5 if page + 5 <= len(TEMPLATES[category]) else len(TEMPLATES[category])
        for key, value in list(TEMPLATES[category].items())[page:mx]:
            ending = word_ending[value['words']['total'] % 10] if not 10 < value['words']['total'] % 100 < 20 else ''
            text = f"{key} ({value['rows']}x{value['cols']}, {value['words']['total']} —Å–ª–æ–≤{ending})"
            button = types.InlineKeyboardButton(text=text, callback_data=f"cw,gen_go,{category},{key}")
            keyboard.add(button)
        if len(TEMPLATES[category]) > 5:
            button1 = types.InlineKeyboardButton(text='‚û°', callback_data=f"cw,gen,{category},{page + 5}")
            button2 = types.InlineKeyboardButton(text='‚¨Ö', callback_data=f"cw,gen,{category},{page - 5}")
            if page > 0 and len(TEMPLATES[category]) - page > 5:
                keyboard.row(button2, button1)
            elif page > 0:
                keyboard.add(button2)
            else:
                keyboard.add(button1)
        button = types.InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data=f"cw,gen,{None},0")
        keyboard.add(button)
    else:
        for key, value in TEMPLATES.items():
            text = f"üóÇ {key}"
            button = types.InlineKeyboardButton(text=text, callback_data=f"cw,gen,{key},0")
            keyboard.add(button)
        button = types.InlineKeyboardButton(text='‚úè –°–æ–∑–¥–∞—Ç—å –ø–æ –æ–±—Ä–∞–∑—Ü—É', callback_data=f"cw,gen_own")
        keyboard.add(button)
        button = types.InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data=f"cw,menu")
        keyboard.add(button)
    return keyboard


async def cw_get_statistics(id):
    result = {}
    for word, data in cw_sessions[id]['meta_data'].items():
        if data['answered_by'] in result.keys():
            result[data['answered_by']] += 1
        else:
            result[data['answered_by']] = 1
    result = dict(sorted(list(result.items()), key=lambda d: d[1]))
    text = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:\n"
    for id, num in result.items():
        user = await bot.get_chat(id)
        if str(id) not in STATS.keys():
            STATS[str(id)] = {}
            STATS[str(id)]['total'] = 0
        STATS[str(id)]['name'] = user.first_name
        STATS[str(id)]['total'] += num
        text += f"<b>{user.first_name}</b> ‚Äî {num}\n"
    save_stats()
    return text


def cw_ans(id, ans):
    global cw_sessions
    rows = cw_sessions[id]['field']['rows']
    cols = cw_sessions[id]['field']['columns']
    start = cw_sessions[id]['meta_data'][ans]['start']
    end = cw_sessions[id]['meta_data'][ans]['end']
    field = cw_sessions[id]['field']['field']
    if cw_sessions[id]['meta_data'][ans]['direction'] == 'horizontal':
        cw_sessions[id]['field']['field'] = field[:start[0] * cols + start[1]] + ans + field[start[0] * cols + start[1] + len(ans):]
    else:
        for i in range(len(ans)):
            field = field[:(i + start[0]) * cols + start[1]] + ans[i] + field[(i + start[0]) * cols + start[1] + 1:]
        cw_sessions[id]['field']['field'] = field
    cw_sessions[id]['meta_data'][ans]['answered'] = True


@dp.callback_query_handler(Text(startswith='cw,'))
async def callback_cw(call):
    global cw_sessions
    action = call.data.split(',')[1]
    if action == 'menu':
        await bot.edit_message_text(f'{cwheader}', chat_id=call.message.chat.id,
                                    message_id=call.message.message_id, reply_markup=get_menu_keyboard())
    if action == 'random':
        open_words()
        total = []
        for cat, templ in TEMPLATES.items():
            for field, value in templ.items():
                total.append((cat, (field, value)))
        rand = rnd.randint(0, len(total) - 1)
        gen_msg = await bot.edit_message_text(f'{cwheader}\n<i>–°–æ–∑–¥–∞—é –∫—Ä–æ—Å—Å–≤–æ—Ä–¥...</i>\n<span class="tg-spoiler">–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {total[rand][0]}</span>',
                                              chat_id=call.message.chat.id, message_id=call.message.message_id)
        field, meta_data = await generate_crossword(field_from_template(total[rand][1][1]))
        if field:
            await bot.delete_message(chat_id=gen_msg.chat.id, message_id=gen_msg.message_id)
            msg_quest = await call.message.answer(get_all_questions(meta_data))
            msg_cw = await bot.send_photo(chat_id=call.message.chat.id, photo=display_cw_img(field, meta_data))
            cw_sessions[str(msg_cw.message_id)] = {'msg_quest': msg_quest.message_id, 'meta_data': meta_data,
                                                   'field': field}
            save_cw_sessions()
        else:
            await bot.edit_message_text(chat_id=gen_msg.chat.id, message_id=gen_msg.message_id,
                text=f"{cwheader}\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫—Ä–æ—Å—Å–≤–æ—Ä–¥ –ø–æ –¥–∞–Ω–Ω–æ–º—É –æ–±—Ä–∞–∑—Ü—É:\n{display_cw(total[rand][1][1])}"
                f"\n–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π?", reply_markup=get_tryagain_keyboard(total[rand][0], total[rand][1][0]))
    if action == 'gen':
        category, page = call.data.split(',')[2], call.data.split(',')[3]
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f'{cwheader} <b>Create</b>', reply_markup=get_gen_keyboard(category, page))
    if action == 'gen_own':
        await GenCW.cw.set()
        text = f"{cwheader}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–∑–µ—Ü, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ # (–±–ª–æ–∫) –∏ * (–ø—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞)\n\n" \
               f"–ù–∞–ø—Ä–∏–º–µ—Ä,\n<code>****\n*##*\n*##*\n****</code>\n\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=text)
    if action == 'gen_go':
        open_words()
        category, key = call.data.split(',')[2], call.data.split(',')[3]
        gen_msg = await bot.edit_message_text(
            f'{cwheader}\n<i>–°–æ–∑–¥–∞—é –∫—Ä–æ—Å—Å–≤–æ—Ä–¥...</i>\n<span class="tg-spoiler">–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}</span>',
            chat_id=call.message.chat.id, message_id=call.message.message_id)
        field, meta_data = await generate_crossword(field_from_template(TEMPLATES[category][key]))
        if field:
            await bot.delete_message(chat_id=gen_msg.chat.id, message_id=gen_msg.message_id)
            msg_quest = await call.message.answer(get_all_questions(meta_data))
            msg_cw = await bot.send_photo(chat_id=call.message.chat.id, photo=display_cw_img(field, meta_data))
            cw_sessions[str(msg_cw.message_id)] = {'msg_quest': msg_quest.message_id, 'meta_data': meta_data,
                                                   'field': field}
            save_cw_sessions()
        else:
            await bot.edit_message_text(chat_id=gen_msg.chat.id, message_id=gen_msg.message_id,
                                        text=f"{cwheader}\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫—Ä–æ—Å—Å–≤–æ—Ä–¥ –ø–æ –¥–∞–Ω–Ω–æ–º—É –æ–±—Ä–∞–∑—Ü—É:\n{display_cw(TEMPLATES[category][key])}"
                                             f"\n–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π?",
                                        reply_markup=get_tryagain_keyboard(category, key))
    if action == 'top':
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=get_cw_top())
    if action == 'stat':
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=await get_stat(str(call['from']['id'])))
    if action == 'info':
        await call.answer('–ü–∞—Ä—É —Å–µ–∫—É–Ω–¥, –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—é...')
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=get_info())
    if action == 'help':
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=get_help())
    if action == 'tip':
        id = call.data.split(',')[2]
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f'{cwheader} <b>Tip</b>\n<i>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞</i>:', reply_markup=get_tip_keyboard(id, 0))
    if action == 'tip_page':
        id, page = call.data.split(',')[2], call.data.split(',')[3]
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f'{cwheader} <b>Tip</b>\n<i>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞</i>:', reply_markup=get_tip_keyboard(id, page))
    if action == 'tip_go':
        open_words()
        keyboard = types.InlineKeyboardMarkup()
        id, word = call.data.split(',')[2], call.data.split(',')[3]
        if len(WORDS[str(len(word))][word]) > 1:
            button = types.InlineKeyboardButton(text='üîÖ –î—Ä—É–≥–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞', callback_data=f"cw,tip1,{id},{word}")
            keyboard.add(button)
        button = types.InlineKeyboardButton(text='üîÖ –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±—É–∫–≤—ã', callback_data=f"cw,tip2,{id},{word}")
        keyboard.add(button)
        button = types.InlineKeyboardButton(text='üîÖ –û—Ç–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ', callback_data=f"cw,tip3,{id},{word}")
        keyboard.add(button)
        button = types.InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data=f"cw,tip,{id}")
        keyboard.add(button)
        text = f'{cwheader} <b>Tip</b>\n–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: ' \
               f'{cw_sessions[id]["meta_data"][word]["num"]}. <i>{cw_sessions[id]["meta_data"][word]["question"]}</i>'
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=text,
                                    reply_markup=keyboard)
    if action == 'tip1':
        id, word = call.data.split(',')[2], call.data.split(',')[3]
        for quest in WORDS[str(len(word))][word]:
            if quest != cw_sessions[id]['meta_data'][word]['question']:
                break
        text = f"{cwheader} <b>Tip</b>\n–ò–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {cw_sessions[id]['meta_data'][word]['num']}:" \
               f"\n\n<code>{quest}</code>"
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=text)
    if action == 'tip2':
        id, word = call.data.split(',')[2], call.data.split(',')[3]
        to_show = []
        for i in range(len(word) // 3 + (len(word) % 3 > 0)):
            letter = rnd.randint(0, len(word) - 1)
            while letter in to_show:
                letter = rnd.randint(0, len(word) - 1)
            to_show.append(letter)
        new_word = word
        for i in range(len(new_word)):
            if i not in to_show:
                new_word = new_word[:i] + '_' + new_word[i + 1:]
        text = f"{cwheader} <b>Tip</b>\n–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ‚Ññ{cw_sessions[id]['meta_data'][word]['num']}:\n\n<code>{new_word}</code>"
        cw_sessions[id]['meta_data'][word]['answered_by'] = bot_id
        save_cw_sessions()
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=text)
    if action == 'tip3':
        id, word = call.data.split(',')[2], call.data.split(',')[3]
        cw_sessions[id]['meta_data'][word]['answered_by'] = bot_id
        save_cw_sessions()
        text = f"{cwheader} <b>Tip</b>\n–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ‚Ññ{cw_sessions[id]['meta_data'][word]['num']}:\n\n<code>{word}</code>"
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=text)
    if action == 'util':
        id = call.data.split(',')[2]
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f'{cwheader}', reply_markup=get_cwutil_keyboard(id))
    if action == 'end':
        id = call.data.split(',')[2]
        await bot.send_message(chat_id=call.message.chat.id, text=get_all_questions(cw_sessions[id]['meta_data']))
        for ans in cw_sessions[id]['meta_data']:
            if not cw_sessions[id]['meta_data'][ans]['answered']:
                cw_ans(id, ans)
                cw_sessions[id]['meta_data'][ans]['answered_by'] = bot_id
        await bot.delete_message(chat_id=call.message.chat.id, message_id=cw_sessions[id]['msg_quest'])
        await bot.delete_message(chat_id=call.message.chat.id, message_id=int(id))
        await bot.send_photo(photo=display_cw_img(cw_sessions[id]['field'], cw_sessions[id]['meta_data']),
                                     chat_id=call.message.chat.id)
        text = await cw_get_statistics(id)
        await call.message.answer(f'{cwheader}\n–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫—Ä–æ—Å—Å–≤–æ—Ä–¥, –º—è—É! üí´\n\n{text}')
        del cw_sessions[id]
        save_cw_sessions()
    if action == 'del':
        id = call.data.split(',')[2]
        await bot.delete_message(chat_id=call.message.chat.id, message_id=cw_sessions[id]['msg_quest'])
        await bot.delete_message(chat_id=call.message.chat.id, message_id=int(id))
        del cw_sessions[id]
        save_cw_sessions()
        await call.answer('–ö—Ä–æ—Å—Å–≤–æ—Ä–¥ —É–¥–∞–ª—ë–Ω :(')
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    if action == 'close':
        await call.answer('–û–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ')
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)


@dp.message_handler(state=GenCW.cw)
async def state_mdir(msg: types.Message, state: FSMContext):
    if not msg.text.replace('*', '').replace('#', '').replace('\n', ''):
        rows = msg.text.count('\n') + 1 if '\n' in msg.text else 1
        cols = len(msg.text[:msg.text.find('\n')])
        if rows > 1:
            for row in msg.text.split('\n'):
                if len(row) != cols:
                    await msg.reply(f'{cwheader}\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π –≤–∏–¥\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã')
                    return False
        await state.finish()
        open_words()
        gen_msg = await msg.answer(f'{cwheader}\n–°–æ–∑–¥–∞—é –∫—Ä–æ—Å—Å–≤–æ—Ä–¥ –ø–æ –≤–∞—à–µ–º—É –æ–±—Ä–∞–∑—Ü—É...')
        text = msg.text.replace('\n', '')
        template = {
            "field": f"{text}",
            "rows": rows,
            "cols": cols, }
        field, meta_data = await generate_crossword(field_from_template(template))
        if field:
            await bot.delete_message(chat_id=gen_msg.chat.id, message_id=gen_msg.message_id)
            msg_quest = await msg.answer(get_all_questions(meta_data))
            msg_cw = await bot.send_photo(chat_id=msg.chat.id, photo=display_cw_img(field, meta_data))
            cw_sessions[str(msg_cw.message_id)] = {'msg_quest': msg_quest.message_id, 'meta_data': meta_data,
                                                   'field': field}
            save_cw_sessions()
        else:
            await bot.edit_message_text(chat_id=gen_msg.chat.id, message_id=gen_msg.message_id,
                                        text=f"{cwheader}\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫—Ä–æ—Å—Å–≤–æ—Ä–¥ –ø–æ –¥–∞–Ω–Ω–æ–º—É –æ–±—Ä–∞–∑—Ü—É:\n{display_cw(template)}"
                                             f"\n–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π?")
    else:
        await msg.reply(f'{cwheader}\n–ü–æ–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã')


@dp.message_handler(commands=['crossword', 'cw'])
async def com_cw(msg):
    global cw_sessions
    if checkright(msg):
        try:
            id = str(msg.reply_to_message.message_id)
        except Exception as ex:
            id = msg.message_id
        if msg.reply_to_message and id in cw_sessions.keys()  or int(id) in [cw_sessions[key]['msg_quest'] for key in cw_sessions.keys()]:
            if id not in cw_sessions.keys():
                for key, value in cw_sessions.items():
                    if value['msg_quest'] == int(id):
                        id = key
                        break
            await msg.answer(f'{cwheader}', reply_markup=get_cwutil_keyboard(id))
        else:
            await msg.answer(f'{cwheader}', reply_markup=get_menu_keyboard())


@dp.message_handler(lambda msg: msg.reply_to_message and msg.text[0] != '/')
async def answer_to_cw(msg):
    global cw_sessions
    id = str(msg.reply_to_message.message_id)
    if id in cw_sessions.keys() or int(id) in [cw_sessions[key]['msg_quest'] for key in cw_sessions.keys()]:
        if id not in cw_sessions.keys():
            for key, value in cw_sessions.items():
                if value['msg_quest'] == int(id):
                    id = key
                    break
        try:
            if len(msg.text.split(' ')) > 1:
                num, ans = msg.text.split(' ')[0], msg.text.split(' ')[1].lower()
            else:
                ans = msg.text.split(' ')[0].lower()
            if ans in cw_sessions[id]['meta_data']:
                if not cw_sessions[id]['meta_data'][ans]['answered']:
                    cw_ans(id, ans)
                    await bot.delete_message(chat_id=msg.chat.id, message_id=int(id))
                    await bot.delete_message(chat_id=msg.chat.id, message_id=cw_sessions[id]['msg_quest'])
                    msg_quest = await msg.answer(get_all_questions(cw_sessions[id]['meta_data']))
                    msg_cw = await msg.answer_photo(display_cw_img(cw_sessions[id]['field'], cw_sessions[id]['meta_data']))
                    if not cw_sessions[id]['meta_data'][ans]['answered_by']:
                        cw_sessions[id]['meta_data'][ans]['answered_by'] = msg.from_user.id
                    if not cw_checkfinish(id):
                        cw_sessions[str(msg_cw.message_id)] = {'msg_quest': msg_quest.message_id,
                                                               'meta_data': cw_sessions[id]['meta_data'],
                                                               'field': cw_sessions[id]['field']}
                        del cw_sessions[id]
                    else:
                        text = await cw_get_statistics(id)
                        await msg.answer(f'{cwheader}\n–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫—Ä–æ—Å—Å–≤–æ—Ä–¥, –º—è—É! üí´\n\n{text}')
                        del cw_sessions[id]
                    save_cw_sessions()
        except Exception as ex:
            pass


def get_info():
    text = f'{cwheader} <b>About</b>\n\n'
    with open("files/crossword_data/RAW_DATA.txt", "r", encoding="utf-8") as f:
        amount = '{0:,}'.format(len(json.load(f))).replace(',', '.')
        text += f'–í—Å–µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: <b>{amount}' \
                f'</b> —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–∏–¥–∞ "–≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–≤–µ—Ç"\n'
    with open("files/crossword_data/data.txt", "r", encoding="utf-8") as f:
        amount = '{0:,}'.format(len(json.load(f))).replace(',', '.')
        text += f'–ò–∑ –Ω–∏—Ö <b>{amount}</b> ' \
                f'–ø—Ä–∏–≥–æ–¥–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä—É—Å—Å–∫–∏—Ö –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞—Ö\n'
    open_words()
    all_len = 0
    mx = 0
    for key, value in WORDS.items():
        all_len += len(value)
        for inkey, invalue in value.items():
            if mx < len(invalue):
                mx = len(invalue)
    all_len = amount = '{0:,}'.format(all_len).replace(',', '.')
    text += f'–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö <b>{all_len}</b> —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã—Ö –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–æ–≤!\n\n'
    text += f'–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üßê\n'
    text += f'üìå –ù–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞ —É—Ö–æ–¥–∏—Ç –≤–ø–ª–æ—Ç—å –¥–æ <b>1.000</b> –ø–æ–ø—ã—Ç–æ–∫! üò±\n'
    text += f'üìå –ü–æ–¥—Å–∫–∞–∑–∫–∞ <b>"–î—Ä—É–≥–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞"</b>, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã—Ö, –Ω–µ –æ—Ç–Ω–∏–º–∞–µ—Ç —É –≤–∞—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ª—É—á—à–∏—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É üòå\n'
    text += f'üìå <b>{mx}</b> ‚Äî –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–æ–µ –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ª–∏—à—å —Å–ª–æ–≤–∞! üò¶'
    return text


def get_help():
    result = f"{cwheader} <b>How to play</b>\n\n\n"
    result += f"""üìÇ <b><u>–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞</u></b>
    
–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:

'üé≤ <b>–°–ª—É—á–∞–π–Ω—ã–π –∫—Ä–æ—Å—Å–≤–æ—Ä–¥</b>' ‚Äî —Å–æ–∑–¥–∞—ë—Ç –∫—Ä–æ—Å—Å–≤–æ—Ä–¥ –∏–∑ —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞.

'üìÇ <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ –æ–±—Ä–∞–∑—Ü—É</b>' ‚Äî –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è, —Å–æ–∑–¥–∞—ë—Ç –∫—Ä–æ—Å—Å–≤–æ—Ä–¥ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ–±—Ä–∞–∑—Ü—É. –§–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ —Ç–∞–∫–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞ - <i>–Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–ª–∏–Ω–∞X—à–∏—Ä–∏–Ω–∞, –∫–æ–ª-–≤–æ —Å–ª–æ–≤)</i>.
- '‚úè <b>–°–æ–∑–¥–∞—Ç—å –ø–æ –æ–±—Ä–∞–∑—Ü—É</b>' ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–æ—Å—Å–≤–æ—Ä–¥ –ø–æ –≤–∞—à–µ–º—É –æ–±—Ä–∞–∑—Ü—É - –¥–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –∏ –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–∑–µ—Ü —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–º—É –ø—Ä–∏–º–µ—Ä—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.

‚ùó –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–æ–≤ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –∏ –¥–∞–∂–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫.


‚úè <b><u>–†–µ—à–µ–Ω–∏–µ –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞</u></b>

–î–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –ø–æ–ª–µ –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ <u>–û–¢–í–ï–¢–ò–¢–¨</u> –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–æ–º (–∏–ª–∏ —Å–ø–∏—Å–∫–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤) —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤–∏–¥–∞
'<i>–Ω–æ–º–µ—Ä_–≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–≤–µ—Ç</i>' –∏–ª–∏ '<i>–æ—Ç–≤–µ—Ç</i>'.
–ù–∞–ø—Ä–∏–º–µ—Ä, '<i>4 –∏–∑–±–∞</i>' –∏–ª–∏ '<i>–∏–∑–±–∞</i>'.

–ö—Ä–æ—Å—Å–≤–æ—Ä–¥ <i>–∑–∞–≤–µ—Ä—à–∏—Ç—Å—è</i>, –∫–æ–≥–¥–∞ –≤—Å–µ –ø–æ–ª—è –±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ <u>–û–¢–í–ï–¢–ò–¢–¨</u> –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–æ–º (–∏–ª–∏ —Å–ø–∏—Å–∫–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤) –∫–æ–º–∞–Ω–¥–æ–π <b>/cw</b>.

–° –ø–æ–º–æ—â—å—é —Ç–∞–∫–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –º–æ–∂–Ω–æ:

- 'üîÆ <b>–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É</b>' (–≤–∏–¥—ã –ø–æ–¥—Å–∫–∞–∑–æ–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã –≤ –±–ª–æ–∫–µ –Ω–∏–∂–µ)

- '‚úè <b>–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫—Ä–æ—Å—Å–≤–æ—Ä–¥</b>' ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è –∏, —Ç–µ–º —Å–∞–º—ã–º, <i>–∑–∞–≤–µ—Ä—à–∏—Ç—å</i> —Ä–µ—à–µ–Ω–∏–µ –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞. –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –≤–æ–ø—Ä–æ—Å—ã –≤ –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–µ –ø–æ–ø–∞–¥—É—Ç, –æ–¥–Ω–∞–∫–æ –≤—Å–µ —Ä–∞–Ω–µ–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã.

- '‚ùå <b>–£–¥–∞–ª–∏—Ç—å –∫—Ä–æ—Å—Å–≤–æ—Ä–¥</b>' ‚Äî —É–¥–∞–ª—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫—Ä–æ—Å—Å–≤–æ—Ä–¥. –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏, –≤—Å–µ —Ä–∞–Ω–µ–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–µ –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã.


üìä <b><u>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</u></b>

–°–∏—Å—Ç–µ–º–∞ –≤–µ–¥—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è —Å–æ–±–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.

–≠—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è <u>—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ <i>–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</i> –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é</u>.

–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫, –¥–∞–Ω–Ω—ã–π –ø–æ—Å–ª–µ –Ω–∏—Ö –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è.

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:

'üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>' ‚Äî –≤—ã–≤–µ–¥–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.

'üåü <b>–¢–æ–ø</b>' ‚Äî –≤—ã–≤–µ–¥–µ—Ç –ø–µ—Ä–≤—ã—Ö 10 –∏–≥—Ä–æ–∫–æ–≤, –ª–∏–¥–∏—Ä—É—é—â–∏—Ö –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–µ—Ä–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.


üîÆ <b><u>–ü–æ–¥—Å–∫–∞–∑–∫–∏</u></b>

–ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é, –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å –ø–æ–º–æ—â—å—é <u>–û–¢–í–ï–¢–ê</u> –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–æ–º (–∏–ª–∏ —Å–ø–∏—Å–∫–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤) –∫–æ–º–∞–Ω–¥–æ–π <b>/cw</b>.

–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ 'üîÆ <b>–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É</b>' –Ω–∞ –≤—ã–±–æ—Ä –¥–∞—ë—Ç—Å—è —Å–ø–∏—Å–æ–∫ –Ω–µ—Ä–µ—à—ë–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.

–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞, –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ –æ–¥–Ω—É –∏–∑ —Ç—Ä—ë—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫:

- 'üîÖ <b>–î—Ä—É–≥–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞</b> ‚Äî –≤—ã–≤–µ–¥–µ—Ç –∏–Ω–æ–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–æ–≥–æ –∂–µ —Å–ª–æ–≤–∞, —á—Ç–æ –∑–∞–≥–∞–¥–∞–Ω–æ. –≠—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–µ –≤—Å–µ–≥–¥–∞ –≤ —Å–∏–ª—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–≤–∞. –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫, –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏ —É –≤–∞—Å <u>–æ—Å—Ç–∞—ë—Ç—Å—è</u> –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–º –∑–∞–Ω–µ—Å–µ–Ω–∏–µ–º –µ–≥–æ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.

- 'üîÖ <b>–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±—É–∫–≤—ã</b> ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ~30% –±—É–∫–≤ —Å–ª–æ–≤–∞ (–Ω–µ —É—á–∏—Ç—ã–≤–∞—è —Ç–µ, —á—Ç–æ —É–∂–µ –æ—Ç–≥–∞–¥–∞–Ω—ã). –ü–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–æ–π –∏ –≤ –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∫—É –æ–Ω –Ω–µ –ø–æ–π–¥—ë—Ç.

- 'üîÖ <b>–û—Ç–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ</b> ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ. –ü–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–æ–π –∏ –≤ –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∫—É –æ–Ω –Ω–µ –ø–æ–π–¥—ë—Ç.
"""
    return result


log.info('–ú–æ–¥—É–ª—å crosswords –∑–∞–≥—Ä—É–∂–µ–Ω')