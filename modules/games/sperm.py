from botpackage import *

SPERM = {}


def load_sperm():
    global SPERM
    try:
        with open('files/sperm.txt', 'r', encoding='utf-8') as f:
            SPERM = json.load(f)
        SPERM = {int(k): v for k, v in SPERM.items()}
        log.info('SPERM –∑–∞–≥—Ä—É–∂–µ–Ω–æ')
    except Exception as err:
        log.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ SPERM')


def save_sperm():
    try:
        with open('files/sperm.txt', 'w', encoding='utf-8') as f:
            json.dump(SPERM, f, ensure_ascii=False, indent=4)
        log.info('SPERM —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
    except Exception as err:
        log.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ SPERM')


@dp.message_handler(commands=['gets'])
async def com_gets(msg):
    if msg.reply_to_message:
        id = msg.reply_to_message.from_user.id
        if id not in SPERM:
            sperm_create_default(msg)
        text = sperm_get_info_another(id)
        await msg.reply(text)
    else:
        id = msg.from_user.id
        if id not in SPERM:
            sperm_create_default(msg)
        text = sperm_get_info(id)
        await msg.reply(text, reply_markup=sperm_get_keyboard(id))


@dp.callback_query_handler(Text(startswith='sperm,'))
async def callback_sperm(call):
    if call.data.split(',')[1] == 'lvlup_power':
        id = int(call.data.split(',')[2])
        if id == call.from_user.id and SPERM[id]['power_level'] < 40:
            if SPERM[id]['bak'] > sperm_get_price_power(id):
                SPERM[id]['bak'] -= sperm_get_price_power(id)
                SPERM[id]['bak'] = round(SPERM[id]['bak'], 2)
                SPERM[id]['power_level'] += 1
                save_sperm()
                await call.answer('–í—ã —É–≤–µ–ª–∏—á–∏–ª–∏ —Å–∏–ª—É dro4–∫–∏!!! ü§©')
                await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                            text=sperm_get_info(id), reply_markup=sperm_get_keyboard(id))
            else:
                await call.answer('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–ø–µ—Ä–º—ã! üò°')
    elif call.data.split(',')[1] == 'lvlup_time':
        id = int(call.data.split(',')[2])
        if id == call.from_user.id and SPERM[id]['power_level'] < 40:
            if SPERM[id]['bak'] > sperm_get_price_time(id):
                SPERM[id]['bak'] -= sperm_get_price_time(id)
                SPERM[id]['bak'] = round(SPERM[id]['bak'], 2)
                SPERM[id]['time_level'] += 1
                save_sperm()
                await call.answer('–í—ã —É–∫—Ä–µ–ø–∏–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∏ —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ dro4–∏—Ç—å —á–∞—â–µ!!!!! ü§©')
                await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=sperm_get_info(id), reply_markup=sperm_get_keyboard(id))
            else:
                await call.answer('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–ø–µ—Ä–º—ã! üò°')


def sperm_get_keyboard(id):
    keyboard = types.InlineKeyboardMarkup()
    if SPERM[id]['power_level'] < 40:
        button1 = types.InlineKeyboardButton(text=f'LvLUP –¥—Ä–æ—á–∫–∞ ({sperm_get_price_power(id)}–º–ª ü•õ)', callback_data=f'sperm,lvlup_power,{id}')
        keyboard.add(button1)
    if SPERM[id]['time_level'] < 40:
        button2 = types.InlineKeyboardButton(text=f'LvLUP –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ({sperm_get_price_time(id)}–º–ª ü•õ)', callback_data=f'sperm,lvlup_time,{id}')
        keyboard.add(button2)
    return keyboard


def sperm_get_info(id):
    text = f"üçÜ <b>{SPERM[id]['name']}'s dick</b>\n\n" if not SPERM[id]['dickname'] else f"<b>{SPERM[id]['dickname']}</b>\n\n"
    text += f"üìè –î–ª–∏–Ω–∞ –≤–∞—à–µ–π –ø–∏—Å—å–∫–∏: <b>{SPERM[id]['len']} —Å–º</b>\n" \
           f"ü•õ –°–ø–µ—Ä–º–æ–±–∞–∫: <b>{SPERM[id]['bak']} –º–ª</b>\n\n" \
           f"üí™ –£—Ä–æ–≤–µ–Ω—å –¥—Ä–æ—á–∫–∏: <b>{SPERM[id]['power_level']}</b>\n" \
           f"üïî –£—Ä–æ–≤–µ–Ω—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: <b>{SPERM[id]['time_level']}</b> <i>({sperm_get_time(id)} –º–∏–Ω)</i>\n" \
           f"üí® –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ CUM—á–µ–π: <b>{SPERM[id]['cum_count']}</b> üí¶\n\n"
    if dt.datetime.fromtimestamp(int(SPERM[id]['time'])) + dt.timedelta(minutes = sperm_get_time(id)) < dt.datetime.now():
        text += f"‚ùóÔ∏è <b>–í—Ä–µ–º—è –ø–æ–¥—Ä–æ—á–∏—Ç—å! /masturbate</b>"
    else:
        time = str(dt.datetime.fromtimestamp(int(SPERM[id]['time'])) + dt.timedelta(minutes = sperm_get_time(id)) - dt.datetime.now())
        time = time[:time.find('.')]
        text += f"‚è≥ <i>–î–æ —Å–ª–µ–¥—É—é—â–µ–π dro4–∫–∏: {time}</i>"
    if SPERM[id]['len'] * 0.8 > 1:
        text += f"\n\n<b>–í—ã –º–æ–∂–µ—Ç–µ –∫–æ–Ω—á–∏—Ç—å /cum</b>\n(–ø–æ—Ç–µ—Ä—è 20% –¥–ª–∏–Ω—ã, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ sperm–æ–±–∞–∫–∞, –≤–º–µ—Å—Ç–æ dro4–∫–∏)"
    else:
        text += f"\n\nü§è –ü–æ–¥—Ä–æ—Å—Ç–∏—Ç–µ –ø–∏—Å—å–∫—É –∏ —Å–º–æ–∂–µ—Ç–µ –∫–æ–Ω—á–∏—Ç—å!"
    if not SPERM[id]['dickname']:
        text += f"\n\n‚úèÔ∏è –° –ø–æ–º–æ—â—å—é 100 –º–ª ü•õ –∏ /rename –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å–≤–æ–π 4le–Ω üëÄ"
    return text


def sperm_get_info_another(id):
    text = f"üçÜ <b>{SPERM[id]['name']}'s dick</b>\n\n" if not SPERM[id][
        'dickname'] else f"<b>{SPERM[id]['dickname']}</b>\n\n"
    text += f"üìè –î–ª–∏–Ω–∞ –≤–∞—à–µ–π –ø–∏—Å—å–∫–∏: <b>{SPERM[id]['len']} —Å–º</b>\n" \
            f"ü•õ –°–ø–µ—Ä–º–æ–±–∞–∫: <b>{SPERM[id]['bak']} –º–ª</b>\n\n" \
            f"üí™ –£—Ä–æ–≤–µ–Ω—å –¥—Ä–æ—á–∫–∏: <b>{SPERM[id]['power_level']}</b>\n" \
            f"üïî –£—Ä–æ–≤–µ–Ω—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: <b>{SPERM[id]['time_level']}</b> <i>({sperm_get_time(id)} –º–∏–Ω)</i>\n" \
            f"üí® –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ CUM—á–µ–π: <b>{SPERM[id]['cum_count']}</b> üí¶\n\n"
    return text


def sperm_get_price_power(id):
    return round(1.5 * math.exp(SPERM[id]['power_level'] / 40 + 1) - 3 * (1 / (SPERM[id]['power_level'] + 1)), 2)


def sperm_get_price_time(id):
    return round(1.25 * math.exp(SPERM[id]['time_level'] / 40 + 1) - 3 * (1 / (SPERM[id]['time_level'] + 1)), 2)


def sperm_get_time(id):
    return 30 - SPERM[id]['time_level'] * 0.5


def sperm_get_len(id):
    from_ = 0.05 + 0.1 * SPERM[id]['power_level']
    to_ = 0.5 + 0.1 * SPERM[id]['power_level']
    return round(rnd.uniform(from_, to_), 2)


def sperm_create_default(msg):
    global SPERM
    id = msg.from_user.id
    name = msg.from_user.first_name
    SPERM[id] = {
        'name': name,
        'len': 1,
        'bak': 0,
        'dickname': None,
        'time': 0,
        'time_level': 0,
        'power_level': 0,
        'cum_count': 0
    }
    save_sperm()


@dp.message_handler(commands=['cum'])
async def com_cum(msg):
    id = msg.from_user.id
    if dt.datetime.fromtimestamp(int(SPERM[id]['time'])) + dt.timedelta(
            minutes=sperm_get_time(id)) < dt.datetime.now():
        if SPERM[id]['len'] * 0.8 > 1:
            SPERM[id]['time'] = dt.datetime.timestamp(dt.datetime.now())
            toadd = round(SPERM[id]['len'] * 0.2 * 0.5, 2)
            SPERM[id]['len'] = round(SPERM[id]['len'] * 0.8, 2)
            SPERM[id]['cum_count'] += 1
            SPERM[id]['bak'] += toadd
            SPERM[id]['bak'] = round(SPERM[id]['bak'], 2)
            save_sperm()
            await msg.reply(f'üò≤üò≤üò≤ <b>–í–´ –ö–û–ù–ß–ò–õ–ò!!!!</b> üí¶üí¶üí¶\n\n<b>+{toadd} –º–ª</b> –≤ sperm–æ–±–∞–∫ ü•õ\n\n–û—Å—Ç–∞–≤—à–∞—è—Å—è –¥–ª–∏–Ω–∞ –ø–∏—Å—é–Ω—á–∏–∫–∞: <b>{SPERM[id]["len"]} —Å–º</b>')
        else:
            await msg.reply('ü§èü§èü§è –£ –≤–∞—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –ø–∏—Å—é–Ω, —á—Ç–æ–±—ã –∫–æ–Ω—á–∏—Ç—å :( —Ö–∞—Ö–∞')
    else:
        time = str(dt.datetime.fromtimestamp(int(SPERM[id]['time'])) + dt.timedelta(
            minutes=sperm_get_time(id)) - dt.datetime.now())
        time = time[:time.find('.')]
        await msg.reply(f"–î–æ —Å–ª–µ–¥—É—é—â–µ–π –¥—Ä–æ—á–∫–∏: <b>{time}</b>")


@dp.message_handler(commands=['masturbate'])
async def com_masturbate(msg):
    if msg.reply_to_message:
        id = msg.reply_to_message.from_user.id
        if id not in SPERM:
            sperm_create_default(msg.reply_to_message)
        if dt.datetime.fromtimestamp(int(SPERM[id]['time'])) + dt.timedelta(minutes=sperm_get_time(id)) < dt.datetime.now():
            SPERM[id]['time'] = dt.datetime.timestamp(dt.datetime.now())
            toadd = sperm_get_len(id)
            SPERM[id]['len'] += toadd
            SPERM[id]['len'] = round(SPERM[id]['len'], 2)
            await msg.reply(f"<b>{msg.from_user.first_name}</b> –ø–æ–¥—Ä–æ—á–∏–ª <b>{msg.reply_to_message.from_user.first_name}</b>! ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è\n\n"
                            f"üìè –ü–∏—Å—å–∫–∞ <b>{msg.reply_to_message.from_user.first_name}</b> —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –Ω–∞ <b>{toadd} —Å–º</b>\n"
                            f"–¢–µ–ø–µ—Ä—å –¥–ª–∏–Ω–∞ —ç—Ç–æ–≥–æ dick'a: <b>{SPERM[id]['len']}</b> üëÄ")
            save_sperm()
        else:
            time = str(dt.datetime.fromtimestamp(int(SPERM[id]['time'])) + dt.timedelta(
                minutes=sperm_get_time(id)) - dt.datetime.now())
            time = time[:time.find('.')]
            await msg.reply(f"‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–π –¥—Ä–æ—á–∫–∏ –¥–ª—è <b>{msg.reply_to_message.from_user.first_name}</b>: <b>{time}</b>")
    else:
        id = msg.from_user.id
        if id not in SPERM:
            sperm_create_default(msg)
        if dt.datetime.fromtimestamp(int(SPERM[id]['time'])) + dt.timedelta(minutes=sperm_get_time(id)) < dt.datetime.now():
            SPERM[id]['time'] = dt.datetime.timestamp(dt.datetime.now())
            toadd = sperm_get_len(id)
            SPERM[id]['len'] += toadd
            SPERM[id]['len'] = round(SPERM[id]['len'], 2)
            await msg.reply(f"–û—Ö —Ö–æ—Ä–æ—à–æ (—á—É–¥–µ—Å–Ω–æ)! üò™\n\nüìè –í–∞—à–∞ –ø–∏—Å—å–∫–∞ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –Ω–∞ <b>{toadd} —Å–º</b>\n"
                            f"‚ù§Ô∏è –¢–µ–ø–µ—Ä—å –¥–ª–∏–Ω–∞ –≤–∞—à–µ–≥–æ 4le–Ω–∞: <b>{SPERM[id]['len']}</b>")
            save_sperm()
        else:
            time = str(dt.datetime.fromtimestamp(int(SPERM[id]['time'])) + dt.timedelta(
                minutes=sperm_get_time(id)) - dt.datetime.now())
            time = time[:time.find('.')]
            await msg.reply(f"‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–π –¥—Ä–æ—á–∫–∏: <b>{time}</b>")


@dp.message_handler(commands=['tops'])
async def com_tops(msg):
    await msg.reply(sperm_get_top())


def sperm_get_top():
    global SPERM
    top = []
    for id, val in SPERM.items():
        top.append((val['dickname'] if val['dickname'] else f"{val['name']}'s dick", val['len']))
    top = sorted(top, key=lambda x: x[1], reverse=True)[:10]
    text = f"ü•≥ <b>–ú–µ–≥–∞ —Ç–æ–ø –ø–∏–ø–∏—Å–µ–∫</b>:\n"
    for i, person in enumerate(top):
        text += f"\n{i + 1}) <b>{person[0]}</b> ‚Äî {person[1]} —Å–º"
    return text


@dp.message_handler(commands=['rename'])
async def com_rename(msg):
    if msg.reply_to_message:
        id = msg.from_user.id
        if SPERM[id]['bak'] >= 100:
            SPERM[id]['bak'] -= 100
            SPERM[id]['dickname'] = msg.reply_to_message.text
            save_sperm()
            await msg.reply(f"–£—Ä–∞, –≤—ã –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ —Å–≤–æ–π dick –≤: <b>{msg.reply_to_message.text}</b> üëÄ\n\n–ß—É–¥–µ—Å–Ω–æ–µ –∏–º—è! ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è")
        else:
            await msg.reply(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç sperm—ã! –î—Ä–æ—á–∏—Ç–µ —á–∞—â–µ üò™")
    else:
        await msg.reply(f"–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤–∞—à–µ–≥–æ dick'a, —á—Ç–æ–±—ã –¥–∞—Ç—å –µ–º—É –∏–º—è üëÄ\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å - 100–º–ª sperm—ã ü•õ</b>")


load_sperm()
log.info('–ú–æ–¥—É–ª—å sperm –∑–∞–≥—Ä—É–∂–µ–Ω')