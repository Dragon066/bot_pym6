from botpackage import *

DAYS = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
DAYS_SHORT = ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å']
MONTH = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']

LESSONS = json.load(open('files/lessons.txt', 'r', encoding='utf-8'))


def update_config_file():
    config = yaml.safe_load(open('config.yaml', 'r', encoding='utf-8'))


def convert(date):
    date = str(date).replace('.', '-')
    result = f"{date.split('-')[2]}.{date.split('-')[1]}, " \
    f"{DAYS_SHORT[cal.weekday(int(date.split('-')[0]), int(date.split('-')[1]), int(date.split('-')[2]))]}"
    return result


def convert_dayhw(date):
    date = str(date).replace('.', '-')
    result = f"{int(date.split('-')[2])} {MONTH[int(date.split('-')[1]) - 1]}, " \
    f"{DAYS[cal.weekday(int(date.split('-')[0]), int(date.split('-')[1]), int(date.split('-')[2]))]}"
    return result


def convert_day_header(date):
    date = str(date).replace('.', '-')
    return f"{int(date.split('-')[2])} {MONTH[int(date.split('-')[1]) - 1]}"


def convert_lesson(lesson):
    if lesson in LESSONS.keys():
        return LESSONS[lesson]['name']
    return lesson


def header(date_start, date_stop):
    date_start, date_stop = str(date_start), str(date_stop)
    result = f"üí´ <b>–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ</b>\n" \
             f"<i>{convert_day_header(date_start)} ‚Äî " \
             f"{convert_day_header(date_stop)}</i>\n\n"
    return result


def header_ruz(date_start, date_stop):
    date_start, date_stop = str(date_start), str(date_stop)
    result = f"üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>\n" \
             f"<i>{convert_day_header(date_start)} ‚Äî " \
             f"{convert_day_header(date_stop)}</i>\n\n"
    return result


def go_async(func):
    loop = asyncio.get_event_loop()
    loop.run_until_complete(func)


def header_works(date_start, date_stop):
    date_start, date_stop = str(date_start), str(date_stop)
    result = f"üñç <b>–ë–ª–∏–∂–∞–π—à–∏–µ —Ä–∞–±–æ—Ç—ã</b>\n<i>{convert_day_header(date_start)} ‚Äî {convert_day_header(date_stop)}\n\n</i>"
    return result


def arguments(text):
    text = text.split()
    com = text[0][1:]
    args = {f'arg{i + 1}':arg for i, arg in enumerate(text[1:])}
    args['com'] = com
    args['args'] = text[1:]
    return args


def checkadmin(id):
    return str(id) in config['SECURITY']['main_admins'] or str(id) in str(config['SECURITY']['admins'])
