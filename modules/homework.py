from botpackage import *

HW = {value['name']: {} for lesson, value in json.load(open('files/lessons.txt', 'r', encoding='utf-8')).items()}
HW['–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'] = {}


@dp.message_handler(commands=['wk'])
async def com_get_works(msg):
    if checkright(msg):
        await msg.answer(get_works())


@dp.message_handler(commands=['hw', 'hw7', 'hw7next'])
async def com_get_hw(msg):
    if checkright(msg):
        args = arguments(msg.text)
        date_start, date_stop = dt.date.today(), dt.date.today() + dt.timedelta(days=14)
        if args['com'] == 'hw':
            if len(args['args']) > 0:
                line = args['arg1'].replace(' ', '-').replace(',', '-').replace('.', '-').split('-')
                try:
                    date_start = dt.date(dt.date.today().year, int(line[1]), int(line[0]))
                    date_stop = date_start + dt.timedelta(days = 14)
                except:
                    pass
            if len(args['args']) > 1:
                line = args['arg2'].replace(' ', '-').replace(',', '-').replace('.', '-').split('-')
                try:
                    date_stop = dt.date(dt.date.today().year, int(line[1]), int(line[0]))
                except:
                    pass
        elif args['com'] == 'hw7':
            date_stop = dt.date.today()
            date_stop = date_stop + dt.timedelta(days=(6 - cal.weekday(date_stop.year, date_stop.month, date_stop.day)))
        elif args['com'] == 'hw7next':
            date_start = date_start + dt.timedelta(days=(7 - cal.weekday(date_stop.year, date_stop.month, date_stop.day)))
            date_stop = date_start + dt.timedelta(days=6)
        await go_hw(msg, date_start, date_stop)


@dp.message_handler(commands=['clear'])
async def com_clear(msg):
    if checkright(msg):
        clear_hw()
        await msg.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏—è –¥–≤—É—Ö–Ω–µ–¥–µ–ª—å–Ω–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–∏—â–µ–Ω—ã! üí®")


@dp.message_handler(commands=['add'])
async def com_add(msg):
    if checkright(msg):
        try:
            id = str(rnd.randint(1, 10000))
            add_hw('–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ', id, msg.reply_to_message.text)
            keyboard = types.InlineKeyboardMarkup()
            for subject in HW.keys():
                if subject != '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ':
                    button = types.InlineKeyboardButton(text=subject, callback_data=f"hw,{id},{subject}")
                    keyboard.add(button)
            button = types.InlineKeyboardButton(text="–î—Ä—É–≥–æ–π...", callback_data=f'hw,{id},–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
            keyboard.add(button)
            await msg.answer("üëå –•–æ—Ä–æ—à–æ. –ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç?", reply_markup=keyboard)
        except Exception as err:
            log.exception('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è')


@dp.callback_query_handler(Text(startswith='hw,'))
async def callback_hw(call):
    if checkright(call, 'hw'):
        if call.data.split(',')[0] == 'hw':
            if call.message and call.data.split(',')[1] == 'cancel':
                id, subject = call.data.split(',')[2:]
                remove_hw('–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ', id)
                save_hw()
                await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="üö´ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ üò•")
            elif call.message and call.data.split(',')[1] == 'another':
                id, subject, value = call.data.split(',')[2:]
                keyboard = create_keyboard_dates(int(int(value) + 7), subject, id)
                button1 = types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data=f'hw,cancel,{id},{subject}')
                button2 = types.InlineKeyboardButton(text="–î—Ä—É–≥–∏–µ –¥–∞—Ç—ã ‚û°",
                                                     callback_data=f'hw,another,{id},{subject},{int(int(value) + 7)}')
                keyboard.row(button1, button2)
                await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=f"üëç –û—Ç–ª–∏—á–Ω–æ, –¥–æ–±–∞–≤–ª—è—é –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É\n"
                                           f"<b>{subject}</b>.\n<i>–ù–∞ –∫–∞–∫–æ–µ —á–∏—Å–ª–æ?</i>",
                                      reply_markup=keyboard, parse_mode='HTML')
            elif call.message and call.data.split(',')[1] != '1':
                id, subject = call.data.split(',')[1:]
                keyboard = create_keyboard_dates(0, subject, id)
                button1 = types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data=f'hw,cancel,{id},{subject}')
                button2 = types.InlineKeyboardButton(text="–î—Ä—É–≥–∏–µ –¥–∞—Ç—ã ‚û°",
                                                     callback_data=f'hw,another,{id},{subject},{0}')
                keyboard.row(button1, button2)
                await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=f"üëç –û—Ç–ª–∏—á–Ω–æ, –¥–æ–±–∞–≤–ª—è—é –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É\n"
                                           f"<b>{subject}</b>.\n<i>–ù–∞ –∫–∞–∫–æ–µ —á–∏—Å–ª–æ?</i>",
                                      reply_markup=keyboard, parse_mode='HTML')
            elif call.message:
                id, subject, date = call.data.split(',')[2:]
                text = HW['–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'][id]
                remove_hw('–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ', id)
                add_hw(subject, date, text)
                await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=f"üåü –ß—É–¥–µ—Å–Ω–æ, –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b>\n"
                                           f"–Ω–∞ <i>{convert(date)}</i>\n"
                                           f"–¥–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: <b>{text}</b>", parse_mode='HTML')


@dp.callback_query_handler(Text(startswith='ed,'))
async def callback_ed(call):
    if checkright(call, 'edit'):
        if call.message and call.data.split(',')[0] == 'ed':
            if len(call.data.split(',')) < 3:
                subject = call.data.split(',')[1]
                keyboard = types.InlineKeyboardMarkup()
                for date in HW[subject]:
                    button = types.InlineKeyboardButton(text=convert(date) if subject != '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ' else date,
                                                        callback_data=f"ed,{subject},{date}")
                    keyboard.add(button)
                button = types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data=f"ed,{subject},cancel")
                keyboard.add(button)
                await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=f"üîé –ê–≥–∞, —Å–º–æ—Ç—Ä–∏–º –¥–æ–º–∞—à–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b>\n"
                                           f"<i>–î–ó –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –º–µ–Ω—è–µ–º?</i>", reply_markup=keyboard, parse_mode='HTML')
            elif call.data.split(',')[2] == 'cancel':
                await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="üö´ –û—Ç–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤—Å—ë –Ω–∞ —Å–≤–æ–∏ –º–µ—Å—Ç–∞! üòÅ")
            else:
                subject, date = call.data.split(',')[1], call.data.split(',')[2]
                text = HW[subject][date]
                await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=f"<code>{text}</code>", parse_mode='HTML')


@dp.callback_query_handler(Text(startswith='del,'))
async def callback_del(call):
    if call.message and call.data.split(',')[0] == 'del':
        if checkright(call, 'del'):
            if len(call.data.split(',')) < 3:
                subject = call.data.split(',')[1]
                keyboard = types.InlineKeyboardMarkup()
                for date in HW[subject]:
                    button = types.InlineKeyboardButton(text=convert(date) if subject != '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ' else date,
                                                        callback_data=f"del,{subject},{date}")
                    keyboard.add(button)
                button = types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data=f"del,{subject},cancel")
                keyboard.add(button)
                await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=f"üîé –ê–≥–∞, —Å–º–æ—Ç—Ä–∏–º –¥–æ–º–∞—à–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b>\n"
                                           f"<i>–î–ó –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ —É–¥–∞–ª—è–µ–º?</i>",
                                      reply_markup=keyboard, parse_mode='HTML')
            elif call.data.split(',')[2] == 'cancel':
                await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="–û—Ç–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª—è–µ–º! üôÉ")
            else:
                subject, date = call.data.split(',')[1], call.data.split(',')[2]
                text = HW[subject][date]
                await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=f"üóë –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b>\n"
                                           f"–ù–∞ —á–∏—Å–ª–æ <b>{convert(date) if subject != '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ' else date}</b>"
                                           f"\n<i>{text}</i>",
                                      parse_mode='HTML')
                remove_hw(subject, date)
                save_hw()


@dp.message_handler(commands=['del'])
async def com_del(msg):
    if checkright(msg):
        keyboard = types.InlineKeyboardMarkup()
        for subject in HW.keys():
            if len(HW[subject]) > 0:
                button = types.InlineKeyboardButton(text=subject, callback_data=f"del,{subject}")
                keyboard.add(button)
        button = types.InlineKeyboardButton(text="–î—Ä—É–≥–æ–π...", callback_data=f'del,–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
        keyboard.add(button)
        await msg.answer("‚úè –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ.\n<i>–ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç?</i>", reply_markup=keyboard, parse_mode='HTML')


@dp.message_handler(commands=['edit'])
async def com_edit(msg):
    if checkright(msg):
        keyboard = types.InlineKeyboardMarkup()
        for subject in HW.keys():
            if len(HW[subject]) > 0:
                button = types.InlineKeyboardButton(text=subject, callback_data=f"ed,{subject}")
                keyboard.add(button)
        button = types.InlineKeyboardButton(text="–î—Ä—É–≥–æ–π...", callback_data=f'ed,–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
        keyboard.add(button)
        await msg.answer("‚úè –ö—Ä—É—Ç–æ, –∏–∑–º–µ–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ!\n<i>–ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç?</i>",
                         reply_markup=keyboard, parse_mode='HTML')


async def go_hw(msg, date_start, date_stop):
    await msg.answer(get_hw(date_start, date_stop), parse_mode='HTML')


def update_hw_file():
    global HW
    try:
        with open(HOMEWORK_path, 'r', encoding='utf-8') as f:
            HW = json.load(f)
        log.info('–î–ó –∑–∞–≥—Ä—É–∂–µ–Ω–æ')
    except Exception as err:
        log.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –î–ó')


def backup_hw():
    try:
        if not os.path.exists(config['PATH']['homework_backup']):
            os.mkdir(config['PATH']['homework_backup'])
        file = f"{homework_backup_path}homework_{str(dt.datetime.now())[:19].replace(' ', '_').replace(':', '_')}.txt"
        shutil.copy(HOMEWORK_path, file)
    except Exception as err:
        log.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–µ–∫–∞–ø–µ –î–ó')


def save_hw():
    backup_hw()
    optimize_hw()
    try:
        with open(HOMEWORK_path, 'w', encoding='utf-8') as f:
            json.dump(HW, f, ensure_ascii=False, indent=4)
        log.info('–î–ó —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
    except Exception as err:
        log.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –î–ó')


def optimize_hw():
    for key in HW:
        HW[key] = dict(sorted(HW[key].items()))


def add_hw(subject, date, text):
    if date == None:
        date = dt.date.today()
    HW[subject][str(date)] = text
    save_hw()


def remove_hw(subject, date):
    try:
        del HW[subject.capitalize()][date]
    except Exception as err:
        log.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è')


def clear_hw():
    date_stop = dt.date.today() - dt.timedelta(days = 14)
    to_remove = {}
    for subject in HW:
        if subject != '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ':
            for key, value in HW[subject].items():
                if dt.date(int(key[:key.find('-')]), int(key[key.find('-') + 1:key.find('-') + 3]), int(key[key.rfind('-') + 1:])) <= date_stop:
                    to_remove[subject] = key
    for subject, key in to_remove.items():
        del HW[subject][key]
    save_hw()


def get_hw(date_start=dt.date.today(), date_stop=dt.date.today() + dt.timedelta(days=14)):
    result = header(date_start, date_stop)
    sign_this, sign_another, sign_another2, sign_last, sign_today = config['UTILITY']['sign_this_weak'],\
                                             config['UTILITY']['sign_another_weak'],\
                                             config['UTILITY']['sign_another_weak2'],\
                                             config['UTILITY']['sign_last_weaks'], \
                                             config['UTILITY']['sign_today']
    date_another = dt.date.today()
    date_another += dt.timedelta(days = 6 - cal.weekday(date_another.year, date_another.month, date_another.day))
    if len(HW['–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ']) > 0:
        for key, value in HW['–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'].items():
            result += f"<i>–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, {key}</i> - {value}\n"
        result += '\n'
    while date_start <= date_stop:
        flag = True
        for subject in HW:
            if subject != '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ':
                for key, value in HW[subject].items():
                    if date_start == dt.date.fromisoformat(key):
                        if flag:
                            result += f"{sign_today if date_start == dt.date.today() else sign_last if date_start < dt.date.today() else sign_this if date_start <= date_another else sign_another if date_start <= date_another + dt.timedelta(days=7) else sign_another2} " \
                                      f"<b>{convert_dayhw(str(date_start))}</b>:\n\n"
                            flag = False
                        result += f"  <b>{subject}</b> - {value}\n\n"
                        break
        date_start += dt.timedelta(days = 1)
    if abs(len(result) - len(header(date_start, date_stop))) < 5:
        result += '–î–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ—Ç ü•≥'
    return result


def get_works(date_stop = dt.date.today() + dt.timedelta(days=21)):
    date_start = dt.date.today()
    result = header_works(date_start, date_stop)
    sign_this, sign_another, sign_another2, sign_last, sign_today = config['UTILITY']['sign_this_weak'], \
                                                                    config['UTILITY']['sign_another_weak'], \
                                                                    config['UTILITY']['sign_another_weak2'], \
                                                                    config['UTILITY']['sign_last_weaks'], \
                                                                    config['UTILITY']['sign_today']
    date_another = dt.date.today()
    date_another += dt.timedelta(days=6 - cal.weekday(date_another.year, date_another.month, date_another.day))
    if len(HW['–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ']) > 0:
        for key, value in HW['–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'].items():
            if '‚ùó' in value:
                result += f"<i>–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ</i> - {value[value.find('‚ùó'):]}\n"
        if abs(len(result) - len(header_works(date_start, date_stop))) < 5:
            result += '\n'
    while date_start <= date_stop:
        flag = True
        for subject in HW:
            if subject != '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ':
                for key, value in HW[subject].items():
                    if date_start == dt.date.fromisoformat(key):
                        if '‚ùó' in value:
                            if flag:
                                result += f"{sign_today if date_start == dt.date.today() else sign_last if date_start < dt.date.today() else sign_this if date_start <= date_another else sign_another if date_start <= date_another + dt.timedelta(days=7) else sign_another2} " \
                                          f"<b>{convert_dayhw(str(date_start))}</b>:\n\n"
                                flag = False
                            result += f"  <b>{subject}</b> - {value[value.find('‚ùó'):]}\n\n"
                            break
        date_start += dt.timedelta(days = 1)
    if abs(len(result) - len(header_works(date_start, date_stop))) < 5:
        result += "–†–∞–±–æ—Ç –Ω–µ—Ç! üò¶"
    return result


log.info('–ú–æ–¥—É–ª—å homework –∑–∞–≥—Ä—É–∂–µ–Ω')